/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 6>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ht_kp: ht_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
        };

        ht_mo: ht_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        td_shift_caps_word: td_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        ht_kp_lt: ht_kp_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_LT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <300>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 17 18 19 20 21 29 30 31 32 33 41 42 43 44 45 59 60 61 62 63 75 76 77 78 79 16 28 40 58 74 55 56 72 73 56 57 58 73 74 69 52 53 54 71 70>;
        };

        ht_kp_rt: ht_kp_rt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_RT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <53 54 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 72 57 73 56 55 74>;
        };

        ht_sk_kp: ht_sk_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SK_KP";
            bindings = <&sk>, <&ht_kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        ht_layer_mo_to: ht_layer_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LAYER_MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <300>;
        };

        ht_parens_wrap: ht_parens_wrap {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_PARENS_WRAP";
            bindings = <&macro_parens_wrap>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <500>;
        };

        ht_brac_wrap: ht_brac_wrap {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BRAC_WRAP";
            bindings = <&macro_brack_wrap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
        };

        ht_carrot_wrap: ht_carrot_wrap {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CARROT_WRAP";
            bindings = <&macro_carrot_wrap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            flavor = "tap-preferred";
        };

        mm_comma_semi: mm_comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_period_colon: mm_period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_question_exc: mm_question_exc {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_QUESTION_EXC";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_slashes: mm_slashes {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SLASHES";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_minus_plus: mm_minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_MINUS_PLUS";
            bindings = <&kp MINUS>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_underscrore_equals: mm_underscrore_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_UNDERSCRORE_EQUALS";
            bindings = <&kp UNDER>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_brack_wrap: mm_brack_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BRACK_WRAP";
            bindings = <&kp LEFT_BRACKET>, <&macro_brack_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_brace_wrap: mm_brace_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BRACE_WRAP";
            bindings = <&kp LEFT_BRACE>, <&macro_brace_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_car_wrap: mm_car_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_CAR_WRAP";
            bindings = <&kp LESS_THAN>, <&macro_carrot_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_parens_wrap: mm_parens_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_PARENS_WRAP";
            bindings = <&kp LEFT_PARENTHESIS>, <&macro_parens_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_quote_wrap: mm_quote_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_QUOTE_WRAP";
            bindings = <&kp DOUBLE_QUOTES>, <&macro_quote_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        mm_sqt_wrap: mm_sqt_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SQT_WRAP";
            bindings = <&kp SINGLE_QUOTE>, <&macro_sqt_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_grave_wrap: mm_grave_wrap {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_GRAVE_WRAP";
            bindings = <&kp GRAVE>, <&macro_tick_wrap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        macro_new_line_below_mac: macro_new_line_below_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER>;
            label = "MACRO_NEW_LINE_BELOW_MAC";
        };

        macro_new_line_above: macro_new_line_above {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp END &kp ENTER>;
            label = "MACRO_NEW_LINE_ABOVE";
        };

        macro_chopsuey: macro_chopsuey {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp H &kp N0 &kp P &kp S &kp U &kp N3 &kp Y>;
            label = "MACRO_CHOPSUEY";
        };

        macro_because: macro_because {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp E &kp C &kp A &kp U &kp S &kp E>;
            label = "MACRO_BECAUSE";
        };

        macro_said: macro_said {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp A &kp I &kp D>;
            label = "MACRO_SAID";
        };

        macro_would: macro_would {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp O &kp U &kp L &kp D>;
            label = "MACRO_WOULD";
        };

        macro_sel_current_word: macro_sel_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT) &kp LA(LS(LEFT_ARROW))>;
            label = "MACRO_SEL_CURRENT_WORD";
        };

        macro_del_current_word: macro_del_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp LA(BACKSPACE)>;
            label = "MACRO_DEL_CURRENT_WORD";
        };

        macro_paste_replace: macro_paste_replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(LS(LEFT)) &kp LG(P)>;
            label = "MACRO_PASTE_REPLACE";
        };

        macro_please: macro_please {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp L &kp E &kp A &kp S &kp E>;
            label = "MACRO_PLEASE";
        };

        macro_the: macro_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "MACRO_THE";
        };

        macro_account: macro_account {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp C &kp C &kp O &kp U &kp N &kp T>;
            label = "MACRO_ACCOUNT";
        };

        macro_question: macro_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U &kp E &kp S &kp T &kp I &kp O &kp N>;
            label = "MACRO_QUESTION";
        };

        macro_fearisthemindkiller: macro_fearisthemindkiller {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp N3 &kp AT &kp R &kp EXCL &kp DLLR &kp T &kp H &kp N3 &kp M &kp N1 &kp N &kp D &kp K &kp N1 &kp L &kp L &kp N3 &kp R>;
            label = "MACRO_FEARISTHEMINDKILLER";
        };

        macro_parens_wrap: macro_parens_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp RPAR &kp LEFT_ARROW &kp LA(LEFT_ARROW) &kp LEFT_PARENTHESIS>;
            label = "MACRO_PARENS_WRAP";
        };

        macro_brack_wrap: macro_brack_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp RIGHT_BRACKET &kp LEFT_ARROW &kp LA(LEFT_ARROW) &kp LEFT_BRACKET>;
            label = "MACRO_BRACK_WRAP";
        };

        macro_brace_wrap: macro_brace_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp RIGHT_BRACE &kp LEFT_ARROW &kp LA(LEFT_ARROW) &kp LEFT_BRACE>;
            label = "MACRO_BRACE_WRAP";
        };

        macro_carrot_wrap: ht_carrot_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp GREATER_THAN &kp LEFT_ARROW &kp LA(LEFT_ARROW) &kp LESS_THAN>;
            label = "HT_CARROT_WRAP";
        };

        macro_quote_wrap: macro_quote_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp DOUBLE_QUOTES &kp LEFT &kp LA(LEFT_ARROW) &kp DOUBLE_QUOTES>;
            label = "MACRO_QUOTE_WRAP";
        };

        macro_sqt_wrap: macro_sqt_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp GRAVE &kp LEFT &kp LA(LEFT_ARROW) &kp GRAVE>;
            label = "MACRO_SQT_WRAP";
        };

        macro_trip_ticks: macro_trip_ticks {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "MACRO_TRIP_TICKS";
        };

        macro_trip_quotes: macro_trip_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DQT &kp DQT>;
            label = "MACRO_TRIP_QUOTES";
        };

        macro_tick_wrap: macro_tick_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp SQT &kp LEFT &kp LA(LEFT_ARROW) &kp SQT>;
            label = "MACRO_TICK_WRAP";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <52 57>;
        };

        combo_z {
            bindings = <&kp Z>;
            key-positions = <47 48>;
            timeout-ms = <75>;
            layers = <0>;
        };

        combo_j {
            bindings = <&kp J>;
            key-positions = <62 61>;
            timeout-ms = <75>;
            layers = <0>;
        };

        combo_lock_nums {
            bindings = <&to 3>;
            key-positions = <70 73>;
            timeout-ms = <100>;
            require-prior-idle-ms = <300>;
            layers = <0>;
        };

        combo_lock_0 {
            bindings = <&to 0>;
            key-positions = <70 73>;
            timeout-ms = <125>;
            require-prior-idle-ms = <300>;
            layers = <6 3 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        cmk {
            bindings = <
&kp F1      &kp F2                    &kp F3                  &kp F4               &kp F5                                                                                                                                                                                  &kp F6                   &kp F7            &kp F8            &kp F9             &kp F10
&kp LBKT    &kp N1                    &kp N2                  &kp N3               &kp N4             &kp N5                                                                                                                                                       &kp N6  &kp N7                   &kp N8            &kp N9            &kp N0             &kp RBKT
&kp TAB     &kp Q                     &kp W                   &kp D                &kp F              &kp K                                                                                                                                                        &kp Y   &kp U                    &kp I             &kp L             &kp MINUS          &mm_slashes
&kp ESC     &ht_kp_lt LEFT_CONTROL A  &ht_kp_lt LALT S        &ht_kp_lt LGUI T     &ht_kp_lt LSHFT R  &kp G                                                                                                                                                        &kp H   &ht_kp_rt RIGHT_SHIFT N  &ht_kp_rt LGUI E  &ht_kp_rt RALT O  &ht_kp_rt RCTRL P  &mm_question_exc
&kp GRAVE   &kp Z                     &kp X                   &kp C                &kp V              &kp B   &ht_kp LEFT_SHIFT ESCAPE  &ht_kp LEFT_CONTROL MINUS  &ht_kp LEFT_ALT SLASH  &ht_kp RIGHT_ALT SEMI  &ht_kp RIGHT_CONTROL SQT  &ht_kp RIGHT_SHIFT TAB  &kp J   &kp M                    &mm_comma_semi    &mm_period_colon  &kp SQT            &kp RSHFT
&magic 7 0  &ht_kp LSHIFT HOME        &ht_kp LCTRL PAGE_DOWN  &ht_kp LALT PAGE_UP  &ht_kp LCMD END            &ht_mo 2 BACKSPACE        &ht_mo 3 DELETE            &key_repeat            &to 4                  &ht_mo 3 RETURN           &ht_mo 2 SPACE                  &kp LEFT                 &kp DOWN          &kp UP            &kp RIGHT          &to 4
            >;
        };

        qwerty {
            bindings = <
&kp F1      &kp F2                    &kp F3                  &kp F4               &kp F5                                                                                                                                                                                                                           &kp F6                   &kp F7            &kp F8            &kp F9             &kp F10
&kp LBKT    &kp N1                    &kp N2                  &kp N3               &kp N4             &kp N5                                                                                                                                                                                                &kp N6  &kp N7                   &kp N8            &kp N9            &kp N0             &kp RBKT
&kp TAB     &kp Q                     &kp W                   &kp E                &kp R              &kp T                                                                                                                                                                                                 &kp Y   &kp U                    &kp I             &kp O             &kp SINGLE_QUOTE   &mm_slashes
&kp ESC     &ht_kp_lt LEFT_CONTROL A  &ht_kp_lt LALT S        &ht_kp_lt LGUI D     &ht_kp_lt LSHFT F  &kp G                                                                                                                                                                                                 &kp H   &ht_kp_rt RIGHT_SHIFT J  &ht_kp_rt LGUI K  &ht_kp_rt RALT L  &ht_kp_rt RCTRL P  &kp MINUS
&kp GRAVE   &kp Z                     &kp X                   &kp C                &kp V              &kp B   &ht_kp LEFT_SHIFT ESCAPE  &ht_kp LEFT_CONTROL LEFT_PARENTHESIS  &ht_kp LEFT_ALT LEFT_BRACKET  &ht_kp RIGHT_ALT RIGHT_BRACKET  &ht_kp RIGHT_CONTROL RIGHT_PARENTHESIS  &ht_kp RIGHT_SHIFT TAB  &kp N   &kp M                    &mm_comma_semi    &mm_period_colon  &mm_question_exc   &kp RSHFT
&magic 7 0  &ht_kp LSHIFT HOME        &ht_kp LCTRL PAGE_DOWN  &ht_kp LALT PAGE_UP  &ht_kp LCMD END            &ht_mo 2 BACKSPACE        &ht_mo 3 DELETE                       &key_repeat                   &to 5                           &ht_mo 3 RETURN                         &ht_mo 2 SPACE                  &kp LEFT                 &kp DOWN          &kp UP            &kp RIGHT          &to 4
            >;
        };

        syms {
            bindings = <
&trans  &trans            &trans           &trans             &trans                                                                                                                        &trans             &trans                   &trans        &trans            &trans
&trans  &trans            &none            &none              &trans                 &trans                                                                                 &trans          &trans             &trans                   &trans        &trans            &trans
&trans  &kp EXCL          &kp AT_SIGN      &kp HASH           &kp DOLLAR             &kp PERCENT                                                                            &kp CARET       &kp AMPERSAND      &kp ASTRK                &kp QUESTION  &kp PIPE          &trans
&trans  &mm_car_wrap      &mm_brace_wrap   &mm_brack_wrap     &mm_parens_wrap        &kp PLUS                                                                               &kp MINUS       &kp SLASH          &mm_quote_wrap           &kp COLON     &macro_tick_wrap  &trans
&trans  &kp GREATER_THAN  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp EQUAL    &kp LEFT_SHIFT  &kp LALT  &trans  &none   &kp RIGHT_ALT  &kp RIGHT_SHIFT  &kp UNDERSCORE  &kp BACKSLASH      &mm_sqt_wrap             &kp SEMI      &kp TILDE         &none
&trans  &none             &kp INS          &kp F11            &kp F12                             &mo 4           &trans    &trans  &trans  &trans         &mo 4                            &kp LA(BACKSPACE)  &macro_del_current_word  &none         &none             &trans
            >;
        };

        nums {
            bindings = <
&trans  &trans   &trans   &trans      &trans                                                                                                     &trans             &trans                   &trans     &trans     &trans
&trans  &trans   &none    &none       &trans       &trans                                                                              &trans    &trans             &trans                   &trans     &trans     &trans
&trans  &kp F1   &kp F2   &kp F3      &kp F4       &kp F5                                                                              &kp F6    &kp F7             &kp F8                   &kp F9     &kp F10    &trans
&trans  &kp N1   &kp N2   &kp N3      &kp N4       &kp N5                                                                              &kp N6    &kp N7             &kp N8                   &kp N9     &kp N0     &trans
&trans  &kp F11  &kp F12  &kp DOLLAR  &kp PERCENT  &kp PLUS  &kp LEFT_SHIFT  &kp LALT  &trans  &none   &kp RIGHT_ALT  &kp RIGHT_SHIFT  &kp PLUS  &kp ASTERISK       &kp SLASH                &kp EQUAL  &kp TILDE  &none
&trans  &none    &kp INS  &kp F11     &kp F12                &kp N0          &mo 4     &trans  &trans  &mo 4          &kp N0                     &kp LA(BACKSPACE)  &macro_del_current_word  &none      &none      &trans
            >;
        };

        nav {
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp LS(C_BRIGHTNESS_INC)   &kp C_PREVIOUS  &kp C_NEXT               &kp C_PLAY_PAUSE                                                                                              &kp RS(C_MUTE)  &kp C_VOLUME_UP          &kp C_VOL_DN      &trans                     &trans
&trans                &trans                     &trans          &trans                   &trans            &trans                                                                &trans                &trans          &trans                   &trans            &trans                     &trans
&trans                &macro_new_line_above      &kp LA(LEFT)    &kp UP_ARROW             &kp LA(RIGHT)     &macro_paste_replace                                                  &macro_paste_replace  &kp HOME        &kp UP_ARROW             &kp END           &macro_new_line_above      &trans
&trans                &macro_new_line_below_mac  &kp LEFT_ARROW  &kp DOWN_ARROW           &kp RIGHT         &kp PAGE_UP                                                           &kp PAGE_UP           &kp LEFT_ARROW  &kp DOWN_ARROW           &kp RIGHT         &macro_new_line_below_mac  &trans
&trans                &macro_del_current_word    &kp LS(TAB)     &macro_sel_current_word  &kp TAB           &kp PAGE_DOWN         &trans  &trans  &trans  &trans  &trans  &trans  &kp PAGE_DOWN         &kp LS(TAB)     &macro_sel_current_word  &kp TAB           &macro_del_current_word    &trans
&trans                &none                      &none           &kp F11                  &kp F12                                 &trans  &trans  &trans  &to 0   &trans  &trans                        &kp LA(LEFT)    &kp LA(DOWN)             &kp LA(UP_ARROW)  &kp LA(RIGHT)              &to 0
            >;
        };

        nav_qwerty {
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp LS(C_BRIGHTNESS_INC)   &kp C_PREVIOUS  &kp C_NEXT               &kp C_PLAY_PAUSE                                                                                              &kp RS(C_MUTE)  &kp C_VOLUME_UP          &kp C_VOL_DN      &trans                     &trans
&trans                &trans                     &trans          &trans                   &trans            &trans                                                                &trans                &trans          &trans                   &trans            &trans                     &trans
&trans                &macro_new_line_above      &kp LA(LEFT)    &kp UP_ARROW             &kp LA(RIGHT)     &macro_paste_replace                                                  &macro_paste_replace  &kp HOME        &kp UP_ARROW             &kp END           &macro_new_line_above      &trans
&to 1                 &macro_new_line_below_mac  &kp LEFT_ARROW  &kp DOWN_ARROW           &kp RIGHT         &kp PAGE_UP                                                           &kp PAGE_UP           &kp LEFT_ARROW  &kp DOWN_ARROW           &kp RIGHT         &macro_new_line_below_mac  &trans
&trans                &macro_del_current_word    &kp LS(TAB)     &macro_sel_current_word  &kp TAB           &kp PAGE_DOWN         &trans  &trans  &trans  &trans  &trans  &trans  &kp PAGE_DOWN         &kp LS(TAB)     &macro_sel_current_word  &kp TAB           &macro_del_current_word    &trans
&trans                &none                      &none           &trans                   &trans                                  &trans  &trans  &trans  &to 1   &trans  &trans                        &kp LA(LEFT)    &kp LA(DOWN)             &kp LA(UP_ARROW)  &kp LA(RIGHT)              &to 1
            >;
        };

        std {
            bindings = <
&kp F1                 &kp F2    &kp F3                            &kp F4                  &kp F5                                                                                                              &kp F6    &kp F7     &kp F8        &kp F9           &kp F10
&kp EQUAL              &kp N1    &kp N2                            &kp N3                  &kp N4              &kp N5                                                                                  &kp N6  &kp N7    &kp N8     &kp N9        &kp N0           &kp MINUS
&kp TAB                &kp Q     &kp W                             &kp E                   &kp R               &kp T                                                                                   &kp Y   &kp U     &kp I      &kp O         &kp SEMI         &kp BSLH
&kp ESC                &kp A     &kp S                             &kp D                   &kp F               &kp G                                                                                   &kp H   &kp J     &kp K      &kp L         &kp P            &kp SQT
&ht_kp_lt LSHFT GRAVE  &kp Z     &kp X                             &kp C                   &kp V               &kp B   &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LGUI  &kp RCTRL  &ht_kp_rt RIGHT_SHIFT TAB  &kp N   &kp M     &kp COMMA  &kp DOT       &kp FSLH         &kp ENTER
&magic 7 0             &kp HOME  &ht_kp_lt LEFT_CONTROL PAGE_DOWN  &ht_kp_lt RALT PAGE_UP  &ht_kp_lt LGUI END          &kp SPACE  &kp BSPC   &kp RALT  &kp RALT  &kp RGUI   &kp SPACE                          &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT_ARROW  &to 0
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &to 0            &to 1            &to 2            &to 6            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
